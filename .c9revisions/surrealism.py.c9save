{"ts":1376774584524,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/usr/bin/env python\n\n#############################################################################\n#    surrealism.py - Surreal sentence generator\n#    Copyright (C) 2013  Ian Havelock\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n#############################################################################\n#\n# This is a derivative work (used with permission) from www.ravenblack.net\n# Credit also goes to Kevan Davis on whose work the surrealism generator at\n# Ravenblack.net is based on.\n#\n#############################################################################\n\n__ALL__ = ['test', 'getfault', 'getsentence', 'Surrealism']\n\n\n# IMPORTS ###################################################################\n\n\n\n# PARTICULAR IMPORTS ########################################################\n\nimport sqlite3\nimport random\n\n# CONSTANTS #################################################################\n\nCONN = sqlite3.connect('surrealism.sqlite')\n\n# VARIABLES #################################################################\n\n\n\n# CLASSES ###################################################################\n\nclass Surrealism(object):\n     \n    def __init__(self):\n        pass\n\n#############################################################################\n\n#  EXTERNAL METHODS BELOW\n\n    def test(self):\n        pass\n    \n    \n    def getfault(self):\n        _counts = self._gettablelimits()\n        _sentence = self._getfault(_counts)\n        #print _sentence\n        \n        while _sentence[0] == 'n':\n            #print _sentence\n            _sentence = self._getfault(_counts)\n        \n        if _sentence[0] == 'y':\n            #print _sentence\n            self._process_sentence(_sentence, _counts)\n        \n        return _sentence \n        \n    \n    def getsentence(self):\n        _counts = self._gettablelimits()\n        _sentence = self._getsentence(_counts)\n        #print _sentence\n        \n        while _sentence[0] == 'n':\n            #print _sentence\n            _sentence = self._getsentence(_counts)\n        \n        if _sentence[0] == 'y':\n            #print _sentence\n            _result = self._process_sentence(_sentence, _counts)\n        \n        return _result \n        \n        \n        \n#############################################################################\n\n#  INTERNAL METHODS BELOW\n\n    def _getsentence(self, _counts):\n        # Let's fetch the sentence that we then need to substitute bits of!\n        cursor = CONN.cursor()\n        #_counts = self._gettablelimits()\n        _rand = random.randint(1,_counts['sen_count'])\n        _query = \"\"\"select * from sursentences where sen_id = {0}\"\"\".format(_rand)\n        cursor.execute(_query)\n        _result = cursor.fetchone()\n        #print _result\n        return _result\n        \n        \n    def _getfault(self, _counts):\n        # Let's fetch the sentence that we then need to substitute bits of!\n        cursor = CONN.cursor()\n        _counts = self._gettablelimits()\n        _query = \"\"\"select * from sursentences where sen_id = 46\"\"\"\n        cursor.execute(_query)\n        _result = cursor.fetchone()\n        #print _result\n        return _result\n    \n    \n    def _getverb(self, _counts):\n        # Let's fetch a VERB\n        cursor = CONN.cursor()\n        #_counts = self._gettablelimits()\n        _rand = random.randint(1,_counts['verb_count'])\n        _query = \"\"\"select * from surverbs where verb_id = {0}\"\"\".format(_rand)\n        cursor.execute(_query)\n        _result = cursor.fetchone()\n        #print _result[1]\n        return _result[1]\n    \n    \n    def _getnoun(self, _counts):\n        # Let's fetch a NOUN\n        cursor = CONN.cursor()\n        #_counts = self._gettablelimits()\n        _rand = random.randint(1,_counts['noun_count'])\n        _query = \"\"\"select * from surnouns where noun_id = {0}\"\"\".format(_rand)\n        cursor.execute(_query)\n        _result = cursor.fetchone()\n        #print _result[1]\n        return _result[1]\n        \n        \n    def _getadjective(self, _counts):\n         # Let's fetch an ADJECTIVE\n        cursor = CONN.cursor()\n        #_counts = self._gettablelimits()\n        _rand = random.randint(1,_counts['adj_count'])\n        _query = \"\"\"select * from suradjs where adj_id = {0}\"\"\".format(_rand)\n        cursor.execute(_query)\n        _result = cursor.fetchone()\n        #print _result[1]\n        return _result[1]\n        \n    \n    def _getname(self, _counts):\n        # Let's fetch a NAME\n        cursor = CONN.cursor()\n        #_counts = self._gettablelimits()\n        _rand = random.randint(1,_counts['name_count'])\n        _query = \"\"\"select * from surnames where name_id = {0}\"\"\".format(_rand)\n        cursor.execute(_query)\n        _result = cursor.fetchone()\n        #print _result[1]\n        return _result[1]\n    \n    \n    def _gettablelimits(self):\n        \n        _table_counts = {\n                        'adj_count' : None,\n                        'name_count' : None,\n                        'noun_count' : None,\n                        'sen_count' : None,\n                        'verb_count' : None        \n                        }\n        \n        cursor = CONN.cursor()\n        \n        cursor.execute('select count(*) from suradjs')\n        _table_counts['adj_count'] = cursor.fetchone()\n        _table_counts['adj_count'] = _table_counts['adj_count'][0] -1\n    \n        cursor.execute('select count(*) from surnames')\n        _table_counts['name_count'] = cursor.fetchone()\n        _table_counts['name_count'] = _table_counts['name_count'][0] -1\n    \n        cursor.execute('select count(*) from surnouns')\n        _table_counts['noun_count'] = cursor.fetchone()\n        _table_counts['noun_count'] = _table_counts['noun_count'][0] -1\n    \n        cursor.execute('select count(*) from sursentences')\n        _table_counts['sen_count'] = cursor.fetchone()\n        _table_counts['sen_count'] = _table_counts['sen_count'][0] -1\n    \n        cursor.execute('select count(*) from surverbs')\n        _table_counts['verb_count'] = cursor.fetchone()\n        _table_counts['verb_count'] = _table_counts['verb_count'][0] -1\n    \n        return _table_counts\n  \n    \n    def _process_sentence(self, _sentence_tuple, _counts):\n        _sentence = _sentence_tuple[2]\n        \n        #print \"\\n\\nSentence ID:  {0}\".format(str(_sentence_tuple[1]))\n        #print \"\\nVanilla sentence:\"\n        #print _sentence\n        \n        # This is where I think it's going wrong - I need to pass the output of each into the next\n        # At the moment I'm simply passing in the ORIGINAL sentence to each function, rather than updating.\n        _sentence = self._replace_verbs(_sentence, _counts)\n        _sentence = self._replace_nouns(_sentence, _counts)\n        _sentence = self._replace_adjective_maybe(_sentence, _counts)\n        _sentence = self._replace_adjectives(_sentence, _counts)\n        _sentence = self._replace_names(_sentence, _counts)\n        _sentence = self._replace_an(_sentence, _counts)\n        _sentence = self._replace_random(_sentence)\n        _sentence = self._replace_capitalise(_sentence)\n        #print _sentence\n        \n        return _sentence\n        \n        \n    def _replace_verbs(self, _sentence, _counts):\n        # Lets find and replace all instances of #VERB\n        #print \"\\nReplacing VERBS:  \"\n        \n        if _sentence is not None:\n            while _sentence.find('#VERB') != -1:\n                _sentence = _sentence.replace('#VERB', str(self._getverb(_counts)), 1)\n                #print _sentence\n                \n                if _sentence.find('#VERB') == -1:\n                    return _sentence\n                \n            return _sentence\n        else:\n            return _sentence\n            \n            \n    def _replace_nouns(self, _sentence, _counts):\n        # Lets find and replace all instances of #NOUN\n        #print \"\\nReplacing NOUNS:  \"\n        \n        #print \"1\"\n        \n        if _sentence is not None:\n            while _sentence.find('#NOUN') != -1:\n                _sentence = _sentence.replace('#NOUN', str(self._getnoun(_counts)), 1)\n                #print _sentence\n                \n                if _sentence.find('#NOUN') == -1:\n                    return _sentence\n                \n            return _sentence\n        else:\n            #print _sentence\n            return _sentence\n    \n    \n    def _replace_adjective_maybe(self, _sentence, _counts):\n        \n        #print \"\\nReplacing ADJECTIVE_MAYBE:  \"\n        _random_decision = random.randint(0, 1)\n           \n        if _sentence is not None:\n            # Lets find and replace all instances of #ADJECTIVE_MAYBE\n            while _sentence.find('#ADJECTIVE_MAYBE') != -1:\n                \n                if _random_decision % 2 == 0:\n                    _sentence = _sentence.replace('#ADJECTIVE_MAYBE', ' ' + str(self._getadjective(_counts)), 1)\n                   # print 'REPLACE ADJ: {0}'.format(_sentence)\n                    #del _random_decision\n                    #print _sentence\n                elif _random_decision % 2 != 0:\n                    _sentence = _sentence.replace('#ADJECTIVE_MAYBE', '', 1)\n                    #print 'DON\\'T REPLACE ADJ: {0}'.format(_sentence)\n                    #del _random_decision\n                    #print _sentence\n                \n                if _sentence.find('#ADJECTIVE_MAYBE') == -1:\n                    return _sentence\n           \n            #print _sentence\n            return _sentence\n        else:\n            #print _sentence\n            return _sentence\n        \n        \n    def _replace_adjectives(self, _sentence, _counts):   \n        \n        #print \"\\nReplacing ADJECTIVES:  \"\n        \n        if _sentence is not None:\n            # Lets find and replace all instances of #ADJECTIVE\n            while _sentence.find('#ADJECTIVE') != -1:\n                _sentence = _sentence.replace('#ADJECTIVE', str(self._getadjective(_counts)), 1)\n                #print _sentence\n                \n                if _sentence.find('#ADJECTIVE') == -1:\n                    return _sentence\n            \n            #print _sentence\n            return _sentence\n        else:\n            #print _sentence\n            return _sentence\n        \n        \n    def _replace_names(self, _sentence, _counts):\n        #print \"\\nReplacing NAMES:  \"\n        \n        if _sentence is not None:\n            # Lets find and replace all instances of #NAME\n            while _sentence.find('#NAME') != -1:\n                _sentence = _sentence.replace('#NAME', str(self._getname(_counts)), 1)\n                #print _sentence\n                \n                if _sentence.find('#NAME') == -1:\n                    return _sentence\n            \n            #print _sentence\n            return _sentence\n        else:\n            #print _sentence\n            return _sentence\n\n\n    def _replace_an(self, _sentence, _counts):\n        #print \"\\nReplacing AN:  \"\n        # Lets find and replace all instances of #AN\n        # This is a little different, as this relies on the next word starting\n        # with a vowel or a consonant.\n        \n        if _sentence is not None:\n            while _sentence.find('#AN') != -1:\n                _an_index = _sentence.find('#AN')\n                #print _an_index\n                \n                if _an_index > -1:\n                    _an_index = _an_index + 4\n                    #print _an_index\n                    \n                    if _sentence[_an_index] in 'aeiouAEIOU':\n                        _sentence = _sentence.replace('#AN', str('an'), 1)\n                    else:\n                        _sentence = _sentence.replace('#AN', str('a'), 1)\n                    \n                \n                if _sentence.find('#AN') == -1:\n                    #print _sentence\n                    return _sentence\n                    \n            #print _sentence\n            return _sentence\n        else:\n            #print _sentence\n            return _sentence\n    \n    \n    def _replace_random(self, _sentence):\n        #print \"\\nReplacing RANDOM:  \"\n        \n        if _sentence is not None:\n            # Lets find and replace all instances of #RANDOM\n            while _sentence.find('#RANDOM') != -1:\n                \n                _random_index = _sentence.find('#RANDOM') \n                _start_index = _sentence.find('#RANDOM') + 8\n                _end_index = _sentence.find(']')\n                \n                if _sentence.find('#RANDOM') is not None:\n                    \n                    _sub_list = _sentence[_start_index:_end_index].split(',')\n \n                    _choice = random.randint(1, int(_sub_list[0]))\n                    _sub_list[_choice]\n                \n                _to_be_replaced = _sentence[_random_index:_end_index + 1]\n                #print _to_be_replaced\n                \n                _sentence = _sentence.replace(_to_be_replaced, _sub_list[_choice], 1)\n                #print str(_sentence)\n                                \n                if _sentence.find('#RANDOM') == -1:\n                    #print _sentence\n                    return _sentence\n                      \n            #print _sentence\n            return _sentence\n        else:\n            #print _sentence\n            return _sentence\n    \n\n    def _replace_capitalise(self, _sentence):\n        #print \"\\nReplacing CAPITALISE:  \"\n        \n        if _sentence is not None:\n            while _sentence.find('#CAPITALISE') != -1:\n                _cap_index = _sentence.find('#CAPITALISE')\n                \n                _part1 = _sentence[:_cap_index]\n                \n                _part2 = _sentence[_cap_index+12:]\n                \n                _sentence = _part1 + _part2.capitalize()    \n                _sentence = _sentence.replace('#CAPITALISE ', '', 1)\n                    \n            if _sentence.find('#CAPITALISE') == -1:\n                    return _sentence\n            \n            #print _sentence\n            return _sentence\n        else:\n            #print _sentence\n            return _sentence\n\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"]],"start1":0,"start2":0,"length1":0,"length2":14856}]],"length":14856}
{"contributors":[],"silentsave":false,"ts":1376774830796,"patch":[[{"diffs":[[0,"    "],[-1,"#print _sentence\n        "],[0,""],[1,""],[0,"\n   "]],"start1":2065,"start2":2065,"length1":33,"length2":8},{"diffs":[[0,"n':\n"],[-1,"            #print _sentence\n"],[0,"    "]],"start1":2101,"start2":2101,"length1":37,"length2":8},{"diffs":[[0,"y':\n"],[-1,"            #print _sentence\n"],[0,"    "]],"start1":2190,"start2":2190,"length1":37,"length2":8},{"diffs":[[0,"ts)\n"],[-1,"        #print _sentence\n"],[0,"    "]],"start1":2409,"start2":2409,"length1":33,"length2":8},{"diffs":[[0,"n':\n"],[-1,"            #print _sentence\n"],[0,"    "]],"start1":2453,"start2":2453,"length1":37,"length2":8},{"diffs":[[0,"y':\n"],[-1,"            #print _sentence\n"],[0,"    "]],"start1":2545,"start2":2545,"length1":37,"length2":8},{"diffs":[[0,"r()\n"],[-1,"        #_counts = self._gettablelimits()\n"],[0,"    "]],"start1":2920,"start2":2920,"length1":50,"length2":8},{"diffs":[[0,"chone()\n"],[-1,"        #print _result\n"],[0,"        "]],"start1":3121,"start2":3121,"length1":39,"length2":16},{"diffs":[[0,"e()\n"],[-1,"        #print _result\n"],[0,"    "]],"start1":3483,"start2":3483,"length1":31,"length2":8},{"diffs":[[0,"r()\n"],[-1,"        #_counts = self._gettablelimits()\n"],[0,"    "]],"start1":3609,"start2":3609,"length1":50,"length2":8},{"diffs":[[0,"e()\n"],[-1,"        #print _result[1]\n"],[0,"    "]],"start1":3812,"start2":3812,"length1":34,"length2":8},{"diffs":[[0,"r()\n"],[-1,"        #_counts = self._gettablelimits()\n"],[0,"    "]],"start1":3941,"start2":3941,"length1":50,"length2":8},{"diffs":[[0,"e()\n"],[-1,"        #print _result[1]\n"],[0,"    "]],"start1":4144,"start2":4144,"length1":34,"length2":8},{"diffs":[[0,"r()\n"],[-1,"        #_counts = self._gettablelimits()\n"],[0,"    "]],"start1":4293,"start2":4293,"length1":50,"length2":8},{"diffs":[[0,"e()\n"],[-1,"        #print _result[1]\n"],[0,"    "]],"start1":4493,"start2":4493,"length1":34,"length2":8},{"diffs":[[0,"r()\n"],[-1,"        #_counts = self._gettablelimits()\n"],[0,"    "]],"start1":4626,"start2":4626,"length1":50,"length2":8},{"diffs":[[0,"e()\n"],[-1,"        #print _result[1]\n"],[0,"    "]],"start1":4829,"start2":4829,"length1":34,"length2":8},{"diffs":[[0,"   \n"],[-1,"        #print \"\\n\\nSentence ID:  {0}\".format(str(_sentence_tuple[1]))\n        #print \"\\nVanilla sentence:\"\n        #print _sentence\n        \n"],[0,"    "]],"start1":6322,"start2":6322,"length1":150,"length2":8},{"diffs":[[0,"ce)\n"],[-1,"        #print _sentence\n"],[0,"    "]],"start1":7009,"start2":7009,"length1":33,"length2":8},{"diffs":[[0,"ERB\n"],[-1,"        #print \"\\nReplacing VERBS:  \"\n"],[0,"    "]],"start1":7166,"start2":7166,"length1":46,"length2":8},{"diffs":[[0," 1)\n"],[-1,"                #print _sentence\n"],[0,"    "]],"start1":7345,"start2":7345,"length1":41,"length2":8},{"diffs":[[0,"sentence"],[-1,"\n               "],[0,""],[1,""],[0," \n      "]],"start1":7444,"start2":7444,"length1":32,"length2":16},{"diffs":[[0,"OUN\n"],[-1,"        #print \"\\nReplacing NOUNS:  \"\n        \n        #print \"1\"\n"],[0,"    "]],"start1":7653,"start2":7653,"length1":74,"length2":8},{"diffs":[[0," 1)\n"],[-1,"                #print _sentence\n"],[0,"    "]],"start1":7832,"start2":7832,"length1":41,"length2":8},{"diffs":[[0,"se:\n"],[-1,"            #print _sentence\n"],[0,"    "]],"start1":7996,"start2":7996,"length1":37,"length2":8},{"diffs":[[0,"   \n"],[-1,"        #print \"\\nReplacing ADJECTIVE_MAYBE:  \"\n"],[0,"    "]],"start1":8104,"start2":8104,"length1":56,"length2":8},{"diffs":[[0,"    "],[-1,"   # print 'REPLACE ADJ: {0}'.format(_sentence)\n                    #del _random_decision\n                    #print _sentence\n                elif _random_decision % 2 != 0:\n                    _sentence = _sentence.replace('#ADJECTIVE_MAYBE', '', 1)\n                    #print 'DON\\'T REPLACE ADJ: {0}'.format(_sentence)\n                    #del _random_decision\n                    #print _sentence"],[1,"elif _random_decision % 2 != 0:\n                    _sentence = _sentence.replace('#ADJECTIVE_MAYBE', '', 1)"],[0,"\n   "]],"start1":8520,"start2":8520,"length1":409,"length2":116},{"diffs":[[0,"nce\n"],[-1,"           \n            #print _sentence\n"],[0,"    "]],"start1":8744,"start2":8744,"length1":49,"length2":8},{"diffs":[[0,"se:\n"],[-1,"            #print _sentence\n"],[0,"    "]],"start1":8787,"start2":8787,"length1":37,"length2":8},{"diffs":[[0,"   \n"],[-1,"        #print \"\\nReplacing ADJECTIVES:  \"\n        \n"],[0,"    "]],"start1":8901,"start2":8901,"length1":60,"length2":8},{"diffs":[[0," 1)\n"],[-1,"                #print _sentence\n"],[0,"    "]],"start1":9150,"start2":9150,"length1":41,"length2":8},{"diffs":[[0,"nce\n"],[-1,"            \n            #print _sentence\n"],[0,"    "]],"start1":9259,"start2":9259,"length1":50,"length2":8},{"diffs":[[0,"se:\n"],[-1,"            #print _sentence\n"],[0,"    "]],"start1":9302,"start2":9302,"length1":37,"length2":8},{"diffs":[[0,"s):\n"],[-1,"        #print \"\\nReplacing NAMES:  \"\n"],[0,"    "]],"start1":9399,"start2":9399,"length1":46,"length2":8},{"diffs":[[0," 1)\n"],[-1,"                #print _sentence\n"],[0,"    "]],"start1":9637,"start2":9637,"length1":41,"length2":8},{"diffs":[[0,"nce\n"],[-1,"            \n            #print _sentence\n"],[0,"    "]],"start1":9741,"start2":9741,"length1":50,"length2":8},{"diffs":[[0,"se:\n"],[-1,"            #print _sentence\n"],[0,"    "]],"start1":9784,"start2":9784,"length1":37,"length2":8},{"diffs":[[0,"s):\n"],[-1,"        #print \"\\nReplacing AN:  \"\n"],[0,"    "]],"start1":9862,"start2":9862,"length1":43,"length2":8},{"diffs":[[0,"N')\n"],[-1,"                #print _an_index\n"],[0,"    "]],"start1":10173,"start2":10173,"length1":41,"length2":8},{"diffs":[[0,"+ 4\n"],[-1,"                    #print _an_index\n"],[0,"    "]],"start1":10271,"start2":10271,"length1":45,"length2":8},{"diffs":[[0,"       \n"],[-1,"                \n"],[0,"        "]],"start1":10545,"start2":10545,"length1":33,"length2":16},{"diffs":[[0,"    "],[-1,"#print _sentence\n                    return _sentence\n                    \n            #print"],[1,"return"],[0," _se"]],"start1":10617,"start2":10617,"length1":101,"length2":14},{"diffs":[[0,"se:\n"],[-1,"            #print _sentence\n"],[0,"    "]],"start1":10677,"start2":10677,"length1":37,"length2":8},{"diffs":[[0,"e):\n"],[-1,"        #print \"\\nReplacing RANDOM:  \"\n"],[0,"    "]],"start1":10758,"start2":10758,"length1":47,"length2":8},{"diffs":[[0,"it(',')\n"],[-1," \n"],[0,"        "]],"start1":11269,"start2":11269,"length1":18,"length2":16},{"diffs":[[0," 1]\n"],[-1,"                #print _to_be_replaced\n                \n"],[0,"    "]],"start1":11470,"start2":11470,"length1":64,"length2":8},{"diffs":[[0," 1)\n"],[-1,"                #print str(_sentence)\n"],[0,"    "]],"start1":11556,"start2":11556,"length1":46,"length2":8},{"diffs":[[0,"-1:\n"],[-1,"                    #print _sentence\n"],[0,"    "]],"start1":11641,"start2":11641,"length1":45,"length2":8},{"diffs":[[0,"   \n"],[-1,"            #print _sentence\n"],[0,"    "]],"start1":11701,"start2":11701,"length1":37,"length2":8},{"diffs":[[0,"se:\n"],[-1,"            #print _sentence\n"],[0,"    "]],"start1":11744,"start2":11744,"length1":37,"length2":8},{"diffs":[[0,"ALISE')\n"],[-1,"                \n"],[0,"        "]],"start1":12021,"start2":12021,"length1":33,"length2":16},{"diffs":[[0,"_index]\n"],[-1,"                \n"],[0,"        "]],"start1":12069,"start2":12069,"length1":33,"length2":16},{"diffs":[[0,"ex+12:]\n"],[-1,"                \n"],[0,"        "]],"start1":12120,"start2":12120,"length1":33,"length2":16},{"diffs":[[0,"nce\n"],[-1,"            \n            #print _sentence\n"],[0,"    "]],"start1":12364,"start2":12364,"length1":50,"length2":8},{"diffs":[[0,"    "],[-1,"#print _sentence\n            return _sentence\n\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"],[1,"return _sentence"]],"start1":12419,"start2":12419,"length1":259,"length2":20}]],"length":12439,"saved":false}
{"ts":1376775090382,"patch":[[{"diffs":[[0,"lt(_counts)\n"],[-1,"        \n"],[0,"        if _"]],"start1":2141,"start2":2141,"length1":33,"length2":24},{"diffs":[[0,"e, _counts)\n"],[-1,"        \n"],[0,"        retu"]],"start1":2228,"start2":2228,"length1":33,"length2":24},{"diffs":[[0,"ce(_counts)\n"],[-1,"        \n"],[0,"        if _"]],"start1":2478,"start2":2478,"length1":33,"length2":24},{"diffs":[[0,"e, _counts)\n"],[-1,"        \n"],[0,"        retu"]],"start1":2575,"start2":2575,"length1":33,"length2":24},{"diffs":[[0," = 4"],[-1,"6"],[1,"5"],[0,"\"\"\"\n"]],"start1":3375,"start2":3375,"length1":9,"length2":9}]],"length":12403,"saved":false}
{"ts":1376775115758,"patch":[[{"diffs":[[0,"d = "],[1,"9"],[0,"4"],[-1,"5"],[0,"\"\"\"\n"]],"start1":3374,"start2":3374,"length1":10,"length2":10}]],"length":12403,"saved":false}
{"ts":1376775224413,"patch":[[{"diffs":[[0,"        "],[1," _result ="],[0," self._p"]],"start1":2188,"start2":2188,"length1":16,"length2":26},{"diffs":[[0,"    return _"],[-1,"sentence "],[1,"result"],[0,"\n        \n  "]],"start1":2254,"start2":2254,"length1":33,"length2":30}]],"length":12410,"saved":false}
{"ts":1376775308218,"patch":[[{"diffs":[[0,"d = "],[-1,"9"],[0,"4"],[1,"6"],[0,"\"\"\"\n"]],"start1":3381,"start2":3381,"length1":10,"length2":10}]],"length":12410,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376903805959,"patch":[[{"diffs":[[0,"##\n\n"],[-1,"class Surrealism(object):\n     \n    "],[0,"def "]],"start1":1729,"start2":1729,"length1":44,"length2":8},{"diffs":[[0,"__init__(self):\n"],[-1,"    "],[0,"    pass\n\n######"]],"start1":1737,"start2":1737,"length1":36,"length2":32},{"diffs":[[0,"HODS BELOW\n\n"],[-1,"    "],[0,"def test(sel"]],"start1":1857,"start2":1857,"length1":28,"length2":24},{"diffs":[[0,"ef test("],[-1,"self):\n   "],[1,"):\n"],[0,"    "],[-1," "],[0,"pass\n   "]],"start1":1870,"start2":1870,"length1":31,"length2":23},{"diffs":[[0,"s\n    \n    \n"],[-1,"    "],[0,"def getfault"]],"start1":1888,"start2":1888,"length1":28,"length2":24},{"diffs":[[0,"etfault("],[-1,"self"],[0,"):\n    "],[-1," "],[-1,"   "],[0,"_counts "]],"start1":1905,"start2":1905,"length1":31,"length2":23},{"diffs":[[0,":\n    _counts = "],[-1,"self."],[0,"_gettablelimits("]],"start1":1914,"start2":1914,"length1":37,"length2":32},{"diffs":[[0,"blelimits()\n    "],[-1,"   "],[-1," "],[0,"_sentence = self"]],"start1":1936,"start2":1936,"length1":36,"length2":32},{"diffs":[[0,"    _sentence = "],[-1,"self."],[0,"_getfault(_count"]],"start1":1948,"start2":1948,"length1":37,"length2":32},{"diffs":[[0,"counts)\n    "],[-1,"    "],[0,"\n"],[-1,"    "],[0,"    while _s"]],"start1":1975,"start2":1975,"length1":33,"length2":25},{"diffs":[[0,"== 'n':\n        "],[-1,"    "],[0,"_sentence = self"]],"start1":2011,"start2":2011,"length1":36,"length2":32},{"diffs":[[0,"_sentence = "],[-1,"self."],[0,"_getfault(_c"]],"start1":2027,"start2":2027,"length1":29,"length2":24},{"diffs":[[0,"lt(_counts)\n    "],[-1,"   "],[-1," "],[0,"if _sentence[0] "]],"start1":2046,"start2":2046,"length1":36,"length2":32},{"diffs":[[0,"ence[0] == 'y':\n"],[-1,"    "],[0,"        _result "]],"start1":2070,"start2":2070,"length1":36,"length2":32},{"diffs":[[0,"      _result = "],[-1,"self."],[0,"_process_sentenc"]],"start1":2088,"start2":2088,"length1":37,"length2":32},{"diffs":[[0,"tence, _counts)\n"],[-1,"    "],[0,"    return _resu"]],"start1":2126,"start2":2126,"length1":36,"length2":32},{"diffs":[[0,"_result\n    "],[-1,"    \n    \n    "],[1,"\n\n"],[0,"def getsente"]],"start1":2153,"start2":2153,"length1":38,"length2":26},{"diffs":[[0,"entence("],[-1,"self"],[0,"):\n    "],[-1," "],[-1,"   "],[0,"_counts "]],"start1":2175,"start2":2175,"length1":31,"length2":23},{"diffs":[[0,":\n    _counts = "],[-1,"self."],[0,"_gettablelimits("]],"start1":2184,"start2":2184,"length1":37,"length2":32},{"diffs":[[0,"blelimits()\n"],[-1,"    "],[0,"    _sentenc"]],"start1":2206,"start2":2206,"length1":28,"length2":24},{"diffs":[[0,"    _sentence = "],[-1,"self."],[0,"_getsentence(_co"]],"start1":2218,"start2":2218,"length1":37,"length2":32},{"diffs":[[0,"counts)\n    "],[-1,"    "],[0,"\n"],[-1,"    "],[0,"    while _s"]],"start1":2248,"start2":2248,"length1":33,"length2":25},{"diffs":[[0,"== 'n':\n        "],[-1," "],[-1,"   "],[0,"_sentence = self"]],"start1":2284,"start2":2284,"length1":36,"length2":32},{"diffs":[[0,"tence = "],[-1,"self."],[0,"_getsent"]],"start1":2304,"start2":2304,"length1":21,"length2":16},{"diffs":[[0,"counts)\n    "],[-1,"  "],[-1,"  "],[0,"if _sentence"]],"start1":2326,"start2":2326,"length1":28,"length2":24},{"diffs":[[0,"y':\n        "],[-1,"    "],[0,"_result = se"]],"start1":2358,"start2":2358,"length1":28,"length2":24},{"diffs":[[0,"esult = "],[-1,"self."],[0,"_process"]],"start1":2372,"start2":2372,"length1":21,"length2":16},{"diffs":[[0,"e, _counts)\n"],[-1,"    "],[0,"    return _"]],"start1":2406,"start2":2406,"length1":28,"length2":24},{"diffs":[[0,"lt \n    "],[-1,"    \n        "],[0,"\n    "],[1,"\n"],[0,"    \n###"]],"start1":2434,"start2":2434,"length1":34,"length2":22},{"diffs":[[0," BELOW\n\n"],[-1,"    "],[0,"def _get"]],"start1":2551,"start2":2551,"length1":20,"length2":16},{"diffs":[[0,"entence("],[-1,"self, "],[0,"_counts)"]],"start1":2568,"start2":2568,"length1":22,"length2":16},{"diffs":[[0,"tence(_counts):\n"],[-1,"    "],[0,"    # Let's fetc"]],"start1":2570,"start2":2570,"length1":36,"length2":32},{"diffs":[[0,"titute bits of!\n"],[-1,"    "],[0,"    cursor = CON"]],"start1":2642,"start2":2642,"length1":36,"length2":32},{"diffs":[[0,"= CONN.cursor()\n"],[-1,"    "],[0,"    _rand = rand"]],"start1":2669,"start2":2669,"length1":36,"length2":32},{"diffs":[[0,"en_count'])\n    "],[-1,"   "],[-1," "],[0,"_query = \"\"\"sele"]],"start1":2724,"start2":2724,"length1":36,"length2":32},{"diffs":[[0,"\".format(_rand)\n"],[-1,"    "],[0,"    cursor.execu"]],"start1":2799,"start2":2799,"length1":36,"length2":32},{"diffs":[[0,"execute(_query)\n"],[-1,"    "],[0,"    _result = cu"]],"start1":2826,"start2":2826,"length1":36,"length2":32},{"diffs":[[0,".fetchone()\n    "],[-1," "],[-1,"   "],[0,"return _result\n "]],"start1":2862,"start2":2862,"length1":36,"length2":32},{"diffs":[[0,"ult\n    "],[-1,"    \n    "],[1,"\n"],[0,"    \n"],[-1,"    "],[0,"def _get"]],"start1":2889,"start2":2889,"length1":34,"length2":22},{"diffs":[[0,"etfault("],[-1,"self, "],[0,"_counts)"]],"start1":2909,"start2":2909,"length1":22,"length2":16},{"diffs":[[0,"fault(_counts):\n"],[-1,"    "],[0,"    # Let's fetc"]],"start1":2911,"start2":2911,"length1":36,"length2":32},{"diffs":[[0,"its of!\n"],[-1,"    "],[0,"    curs"]],"start1":2991,"start2":2991,"length1":20,"length2":16},{"diffs":[[0,"r()\n    "],[-1,"   "],[-1," "],[0,"_counts "]],"start1":3022,"start2":3022,"length1":20,"length2":16},{"diffs":[[0,"ounts = "],[-1,"self."],[0,"_gettabl"]],"start1":3032,"start2":3032,"length1":21,"length2":16},{"diffs":[[0,"imits()\n"],[-1,"    "],[0,"    _que"]],"start1":3050,"start2":3050,"length1":20,"length2":16},{"diffs":[[0,"= 46\"\"\"\n"],[-1,"    "],[0,"    curs"]],"start1":3114,"start2":3114,"length1":20,"length2":16},{"diffs":[[0,"ute(_query)\n    "],[-1," "],[-1,"   "],[0,"_result = cursor"]],"start1":3137,"start2":3137,"length1":36,"length2":32},{"diffs":[[0,".fetchone()\n    "],[-1,"  "],[-1,"  "],[0,"return _result\n "]],"start1":3169,"start2":3169,"length1":36,"length2":32},{"diffs":[[0,"_result\n"],[-1,"    \n    \n    "],[1,"\n\n"],[0,"def _get"]],"start1":3192,"start2":3192,"length1":30,"length2":18},{"diffs":[[0,"getverb("],[-1,"self, "],[0,"_counts)"]],"start1":3207,"start2":3207,"length1":22,"length2":16},{"diffs":[[0,"b(_counts):\n    "],[-1," "],[-1,"   "],[0,"# Let's fetch a "]],"start1":3213,"start2":3213,"length1":36,"length2":32},{"diffs":[[0," a VERB\n    "],[-1,"  "],[-1,"  "],[0,"cursor = CON"]],"start1":3242,"start2":3242,"length1":28,"length2":24},{"diffs":[[0,"NN.cursor()\n    "],[-1,"   "],[-1," "],[0,"_rand = random.r"]],"start1":3265,"start2":3265,"length1":36,"length2":32},{"diffs":[[0,"['verb_count'])\n"],[-1,"    "],[0,"    _query = \"\"\""]],"start1":3313,"start2":3313,"length1":36,"length2":32},{"diffs":[[0,"\".format(_rand)\n"],[-1,"    "],[0,"    cursor.execu"]],"start1":3389,"start2":3389,"length1":36,"length2":32},{"diffs":[[0,"ute(_query)\n    "],[-1," "],[-1,"   "],[0,"_result = cursor"]],"start1":3420,"start2":3420,"length1":36,"length2":32},{"diffs":[[0,"rsor.fetchone()\n"],[-1,"    "],[0,"    return _resu"]],"start1":3448,"start2":3448,"length1":36,"length2":32},{"diffs":[[0," _result[1]\n"],[-1,"    \n    \n    "],[1,"\n\n"],[0,"def _getnoun"]],"start1":3474,"start2":3474,"length1":38,"length2":26},{"diffs":[[0,"getnoun("],[-1,"self, "],[0,"_counts)"]],"start1":3493,"start2":3493,"length1":22,"length2":16},{"diffs":[[0,"tnoun(_counts):\n"],[-1,"    "],[0,"    # Let's fetc"]],"start1":3495,"start2":3495,"length1":36,"length2":32},{"diffs":[[0," a NOUN\n    "],[-1,"  "],[-1,"  "],[0,"cursor = CON"]],"start1":3528,"start2":3528,"length1":28,"length2":24},{"diffs":[[0,"= CONN.cursor()\n"],[-1,"    "],[0,"    _rand = rand"]],"start1":3547,"start2":3547,"length1":36,"length2":32},{"diffs":[[0,"['noun_count'])\n"],[-1,"    "],[0,"    _query = \"\"\""]],"start1":3599,"start2":3599,"length1":36,"length2":32},{"diffs":[[0,"\".format(_rand)\n"],[-1,"    "],[0,"    cursor.execu"]],"start1":3675,"start2":3675,"length1":36,"length2":32},{"diffs":[[0,"ute(_query)\n    "],[-1," "],[-1,"   "],[0,"_result = cursor"]],"start1":3706,"start2":3706,"length1":36,"length2":32},{"diffs":[[0,".fetchone()\n    "],[-1,"  "],[-1,"  "],[0,"return _result[1"]],"start1":3738,"start2":3738,"length1":36,"length2":32},{"diffs":[[0,"[1]\n    "],[-1,"    \n        "],[0,"\n    "],[1,"\n"],[0,"def _get"]],"start1":3768,"start2":3768,"length1":34,"length2":22},{"diffs":[[0,"jective("],[-1,"self, "],[0,"_counts)"]],"start1":3792,"start2":3792,"length1":22,"length2":16},{"diffs":[[0,"unts):\n     "],[-1," "],[-1,"   "],[0,"# Let's fetc"]],"start1":3803,"start2":3803,"length1":28,"length2":24},{"diffs":[[0,"JECTIVE\n    "],[-1,"   "],[-1," "],[0,"cursor = CON"]],"start1":3834,"start2":3834,"length1":28,"length2":24},{"diffs":[[0,"= CONN.cursor()\n"],[-1,"    "],[0,"    _rand = rand"]],"start1":3853,"start2":3853,"length1":36,"length2":32},{"diffs":[[0,"s['adj_count'])\n"],[-1,"    "],[0,"    _query = \"\"\""]],"start1":3904,"start2":3904,"length1":36,"length2":32},{"diffs":[[0,"\".format(_rand)\n"],[-1,"    "],[0,"    cursor.execu"]],"start1":3978,"start2":3978,"length1":36,"length2":32},{"diffs":[[0,"ute(_query)\n    "],[-1,"  "],[-1,"  "],[0,"_result = cursor"]],"start1":4009,"start2":4009,"length1":36,"length2":32},{"diffs":[[0,"rsor.fetchone()\n"],[-1,"    "],[0,"    return _resu"]],"start1":4037,"start2":4037,"length1":36,"length2":32},{"diffs":[[0,"[1]\n    "],[-1,"    \n    \n    "],[1,"\n\n"],[0,"def _get"]],"start1":4071,"start2":4071,"length1":30,"length2":18},{"diffs":[[0,"getname("],[-1,"self, "],[0,"_counts)"]],"start1":4086,"start2":4086,"length1":22,"length2":16},{"diffs":[[0,"tname(_counts):\n"],[-1,"    "],[0,"    # Let's fetc"]],"start1":4088,"start2":4088,"length1":36,"length2":32},{"diffs":[[0," a NAME\n    "],[-1,"   "],[-1," "],[0,"cursor = CON"]],"start1":4121,"start2":4121,"length1":28,"length2":24},{"diffs":[[0,"NN.cursor()\n"],[-1,"    "],[0,"    _rand = "]],"start1":4144,"start2":4144,"length1":28,"length2":24},{"diffs":[[0,"ount'])\n"],[-1,"    "],[0,"    _que"]],"start1":4200,"start2":4200,"length1":20,"length2":16},{"diffs":[[0,"(_rand)\n    "],[-1," "],[-1,"   "],[0,"cursor.execu"]],"start1":4276,"start2":4276,"length1":28,"length2":24},{"diffs":[[0,"_query)\n    "],[-1,"   "],[-1," "],[0,"_result = cu"]],"start1":4303,"start2":4303,"length1":28,"length2":24},{"diffs":[[0,".fetchone()\n"],[-1,"    "],[0,"    return _"]],"start1":4331,"start2":4331,"length1":28,"length2":24},{"diffs":[[0,"sult[1]\n"],[-1,"    \n    \n    "],[1,"\n\n"],[0,"def _get"]],"start1":4357,"start2":4357,"length1":30,"length2":18},{"diffs":[[0,"its("],[-1,"self):\n    "],[1,"):\n"],[0,"    \n"],[-1,"    "],[0,"    "]],"start1":4383,"start2":4383,"length1":28,"length2":16},{"diffs":[[0,"nts = {\n"],[-1,"    "],[0,"        "]],"start1":4409,"start2":4409,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1,"  "],[-1,"  "],[0,"'name_co"]],"start1":4469,"start2":4469,"length1":20,"length2":16},{"diffs":[[0,"_count' : None,\n"],[-1,"    "],[0,"                "]],"start1":4482,"start2":4482,"length1":36,"length2":32},{"diffs":[[0,"        "],[-1,"    "],[0,"'sen_cou"]],"start1":4551,"start2":4551,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1," "],[-1,"   "],[0,"'verb_co"]],"start1":4591,"start2":4591,"length1":20,"length2":16},{"diffs":[[0,"    "],[-1,"    }\n        \n    "],[1,"}\n    \n"],[0,"    "]],"start1":4643,"start2":4643,"length1":27,"length2":15},{"diffs":[[0,"r()\n    "],[-1,"    \n "],[1,"\n"],[0,"    "],[-1,"   "],[0,"cursor.e"]],"start1":4677,"start2":4677,"length1":29,"length2":21},{"diffs":[[0,"m suradjs')\n    "],[-1,"  "],[-1,"  "],[0,"_table_counts['a"]],"start1":4725,"start2":4725,"length1":36,"length2":32},{"diffs":[[0,".fetchone()\n    "],[-1,"   "],[-1," "],[0,"_table_counts['a"]],"start1":4776,"start2":4776,"length1":36,"length2":32},{"diffs":[[0,"unt'][0] -1\n"],[-1,"    \n "],[1,"\n"],[0,"    "],[-1,"   "],[0,"cursor.execu"]],"start1":4842,"start2":4842,"length1":37,"length2":29},{"diffs":[[0," surnames')\n    "],[-1,"  "],[-1,"  "],[0,"_table_counts['n"]],"start1":4895,"start2":4895,"length1":36,"length2":32},{"diffs":[[0,"rsor.fetchone()\n"],[-1,"    "],[0,"    _table_count"]],"start1":4943,"start2":4943,"length1":36,"length2":32},{"diffs":[[0,"unt'][0] -1\n"],[-1,"    "],[0,"\n"],[-1,"    "],[0,"    cursor.e"]],"start1":5015,"start2":5015,"length1":33,"length2":25},{"diffs":[[0," surnouns')\n    "],[-1,"  "],[-1,"  "],[0,"_table_counts['n"]],"start1":5068,"start2":5068,"length1":36,"length2":32},{"diffs":[[0,".fetchone()\n    "],[-1,"   "],[-1," "],[0,"_table_counts['n"]],"start1":5120,"start2":5120,"length1":36,"length2":32},{"diffs":[[0,"unt'][0] -1\n"],[-1,"    "],[0,"\n"],[-1,"    "],[0,"    cursor.e"]],"start1":5188,"start2":5188,"length1":33,"length2":25},{"diffs":[[0,"sentences')\n    "],[-1," "],[-1,"   "],[0,"_table_counts['s"]],"start1":5245,"start2":5245,"length1":36,"length2":32},{"diffs":[[0,"rsor.fetchone()\n"],[-1,"    "],[0,"    _table_count"]],"start1":5292,"start2":5292,"length1":36,"length2":32},{"diffs":[[0,"unt'][0] -1\n"],[-1,"    "],[0,"\n"],[-1,"    "],[0,"    cursor.e"]],"start1":5362,"start2":5362,"length1":33,"length2":25},{"diffs":[[0,"verbs')\n    "],[-1," "],[-1,"   "],[0,"_table_count"]],"start1":5419,"start2":5419,"length1":28,"length2":24},{"diffs":[[0,"e()\n    "],[-1,"  "],[-1,"  "],[0,"_table_c"]],"start1":5475,"start2":5475,"length1":20,"length2":16},{"diffs":[[0,"][0] -1\n"],[-1,"    \n    "],[1,"\n"],[0,"    retu"]],"start1":5539,"start2":5539,"length1":25,"length2":17},{"diffs":[[0,"_counts\n"],[-1,"  \n    \n    "],[1,"\n\n"],[0,"def _pro"]],"start1":5565,"start2":5565,"length1":28,"length2":18},{"diffs":[[0,"entence("],[-1,"self, "],[0,"_sentenc"]],"start1":5589,"start2":5589,"length1":22,"length2":16},{"diffs":[[0,"ounts):\n    "],[-1,"   "],[-1," "],[0,"_sentence = "]],"start1":5616,"start2":5616,"length1":28,"length2":24},{"diffs":[[0,"uple[2]\n    "],[-1,"    \n    "],[1,"\n"],[0,"    # This i"]],"start1":5651,"start2":5651,"length1":33,"length2":25},{"diffs":[[0,"ext\n    "],[-1,"   "],[-1," "],[0,"# At the"]],"start1":5755,"start2":5755,"length1":20,"length2":16},{"diffs":[[0,"dating.\n"],[-1,"    "],[0,"    _sen"]],"start1":5855,"start2":5855,"length1":20,"length2":16},{"diffs":[[0,"    _sentence = "],[-1,"self."],[0,"_replace_verbs(_"]],"start1":5863,"start2":5863,"length1":37,"length2":32},{"diffs":[[0,"tence, _counts)\n"],[-1,"    "],[0,"    _sentence = "]],"start1":5898,"start2":5898,"length1":36,"length2":32},{"diffs":[[0,"    _sentence = "],[-1,"self."],[0,"_replace_nouns(_"]],"start1":5914,"start2":5914,"length1":37,"length2":32},{"diffs":[[0,"e, _counts)\n    "],[-1," "],[-1,"   "],[0,"_sentence = self"]],"start1":5953,"start2":5953,"length1":36,"length2":32},{"diffs":[[0,"    _sentence = "],[-1,"self."],[0,"_replace_adjecti"]],"start1":5965,"start2":5965,"length1":37,"length2":32},{"diffs":[[0,"e, _counts)\n    "],[-1,"   "],[-1," "],[0,"_sentence = self"]],"start1":6014,"start2":6014,"length1":36,"length2":32},{"diffs":[[0,"    _sentence = "],[-1,"self."],[0,"_replace_adjecti"]],"start1":6026,"start2":6026,"length1":37,"length2":32},{"diffs":[[0,"tence, _counts)\n"],[-1,"    "],[0,"    _sentence = "]],"start1":6066,"start2":6066,"length1":36,"length2":32},{"diffs":[[0,"    _sentence = "],[-1,"self."],[0,"_replace_names(_"]],"start1":6082,"start2":6082,"length1":37,"length2":32},{"diffs":[[0,"tence, _counts)\n"],[-1,"    "],[0,"    _sentence = "]],"start1":6117,"start2":6117,"length1":36,"length2":32},{"diffs":[[0,"    _sentence = "],[-1,"self."],[0,"_replace_an(_sen"]],"start1":6133,"start2":6133,"length1":37,"length2":32},{"diffs":[[0,"counts)\n"],[-1,"    "],[0,"    _sen"]],"start1":6173,"start2":6173,"length1":20,"length2":16},{"diffs":[[0,"    _sentence = "],[-1,"self."],[0,"_replace_random("]],"start1":6181,"start2":6181,"length1":37,"length2":32},{"diffs":[[0,"(_sentence)\n"],[-1,"    "],[0,"    _sentenc"]],"start1":6212,"start2":6212,"length1":28,"length2":24},{"diffs":[[0,"tence = "],[-1,"self."],[0,"_replace"]],"start1":6232,"start2":6232,"length1":21,"length2":16},{"diffs":[[0,"ntence)\n    "],[-1,"    \n    "],[1,"\n"],[0,"    return _"]],"start1":6263,"start2":6263,"length1":33,"length2":25},{"diffs":[[0,"nce\n    "],[-1," "],[-1,"   \n        "],[0,"\n    "],[1,"\n"],[0,"def _rep"]],"start1":6293,"start2":6293,"length1":34,"length2":22},{"diffs":[[0,"e_verbs("],[-1,"self, "],[0,"_sentenc"]],"start1":6318,"start2":6318,"length1":22,"length2":16},{"diffs":[[0,"ence, _counts):\n"],[-1,"    "],[0,"    # Lets find "]],"start1":6331,"start2":6331,"length1":36,"length2":32},{"diffs":[[0,"f #VERB\n    "],[-1,"    \n    "],[1,"\n"],[0,"    if _sent"]],"start1":6390,"start2":6390,"length1":33,"length2":25},{"diffs":[[0,"t None:\n        "],[-1,"   "],[-1," "],[0,"while _sentence."]],"start1":6425,"start2":6425,"length1":36,"length2":32},{"diffs":[[0,"'#VERB') != -1:\n"],[-1,"    "],[0,"            _sen"]],"start1":6462,"start2":6462,"length1":36,"length2":32},{"diffs":[[0,"#VERB', str("],[-1,"self."],[0,"_getverb(_co"]],"start1":6521,"start2":6521,"length1":29,"length2":24},{"diffs":[[0,"            "],[-1,"    \n    "],[1,"\n"],[0,"            "]],"start1":6556,"start2":6556,"length1":33,"length2":25},{"diffs":[[0,"                "],[-1,"  "],[-1,"  "],[0,"return _sentence"]],"start1":6615,"start2":6615,"length1":36,"length2":32},{"diffs":[[0,"ntence \n        "],[-1,"   "],[-1," "],[0,"return _sentence"]],"start1":6641,"start2":6641,"length1":36,"length2":32},{"diffs":[[0,"eturn _sentence\n"],[-1,"    "],[0,"    else:\n      "]],"start1":6658,"start2":6658,"length1":36,"length2":32},{"diffs":[[0,"  else:\n        "],[-1,"    "],[0,"return _sentence"]],"start1":6676,"start2":6676,"length1":36,"length2":32},{"diffs":[[0,"    "],[-1,"    \n   "],[1,"\n"],[0,"        "],[-1," \n    "],[1,"\n"],[0,"def "]],"start1":6713,"start2":6713,"length1":30,"length2":18},{"diffs":[[0,"e_nouns("],[-1,"self, "],[0,"_sentenc"]],"start1":6738,"start2":6738,"length1":22,"length2":16},{"diffs":[[0,"ence, _counts):\n"],[-1,"    "],[0,"    # Lets find "]],"start1":6751,"start2":6751,"length1":36,"length2":32},{"diffs":[[0,"f #NOUN\n    "],[-1,"    \n  "],[1,"\n"],[0,"    "],[-1,"  "],[0,"if _sentence"]],"start1":6810,"start2":6810,"length1":37,"length2":29},{"diffs":[[0,"ce is not None:\n"],[-1,"    "],[0,"        while _s"]],"start1":6837,"start2":6837,"length1":36,"length2":32},{"diffs":[[0,"'#NOUN') != -1:\n"],[-1,"    "],[0,"            _sen"]],"start1":6882,"start2":6882,"length1":36,"length2":32},{"diffs":[[0,"#NOUN', str("],[-1,"self."],[0,"_getnoun(_co"]],"start1":6941,"start2":6941,"length1":29,"length2":24},{"diffs":[[0," 1)\n            "],[-1,"    \n  "],[1,"\n"],[0,"              if"]],"start1":6972,"start2":6972,"length1":39,"length2":33},{"diffs":[[0,"   \n            "],[-1,"  "],[0,"if _sentence.fin"]],"start1":6985,"start2":6985,"length1":34,"length2":32},{"diffs":[[0,"                "],[-1,"    "],[0,"return _sentence"]],"start1":7035,"start2":7035,"length1":36,"length2":32},{"diffs":[[0,"nce\n            "],[-1,"    "],[0,"\n            ret"]],"start1":7064,"start2":7064,"length1":36,"length2":32},{"diffs":[[0,"       \n        "],[-1,"    "],[0,"return _sentence"]],"start1":7073,"start2":7073,"length1":36,"length2":32},{"diffs":[[0,"eturn _sentence\n"],[-1,"    "],[0,"    else:\n      "]],"start1":7090,"start2":7090,"length1":36,"length2":32},{"diffs":[[0,"  else:\n        "],[-1,"  "],[-1,"  "],[0,"return _sentence"]],"start1":7108,"start2":7108,"length1":36,"length2":32},{"diffs":[[0,"n _sentence\n"],[-1,"    \n    \n    "],[1,"\n\n"],[0,"def _replace"]],"start1":7129,"start2":7129,"length1":38,"length2":26},{"diffs":[[0,"e_maybe("],[-1,"self, "],[0,"_sentenc"]],"start1":7164,"start2":7164,"length1":22,"length2":16},{"diffs":[[0,"ounts):\n    "],[-1," "],[-1,"   \n    "],[1,"\n"],[0,"    _random_"]],"start1":7185,"start2":7185,"length1":33,"length2":25},{"diffs":[[0,", 1)\n       "],[-1,"   "],[-1," \n    "],[1,"\n"],[0,"    if _sent"]],"start1":7237,"start2":7237,"length1":33,"length2":25},{"diffs":[[0,"ce is not None:\n"],[-1,"    "],[0,"        # Lets f"]],"start1":7264,"start2":7264,"length1":36,"length2":32},{"diffs":[[0,"E_MAYBE\n        "],[-1,"  "],[-1,"  "],[0,"while _sentence."]],"start1":7338,"start2":7338,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1,"    \n    "],[1,"\n"],[0,"            "]],"start1":7402,"start2":7402,"length1":33,"length2":25},{"diffs":[[0,"                "],[-1,"    "],[0,"_sentence = _sen"]],"start1":7457,"start2":7457,"length1":36,"length2":32},{"diffs":[[0,", ' ' + str("],[-1,"self."],[0,"_getadjectiv"]],"start1":7521,"start2":7521,"length1":29,"length2":24},{"diffs":[[0,"        "],[-1,"  "],[-1,"  "],[0,"elif _ra"]],"start1":7565,"start2":7565,"length1":20,"length2":16},{"diffs":[[0,"n % 2 != 0:\n"],[-1,"    "],[0,"            "]],"start1":7593,"start2":7593,"length1":28,"length2":24},{"diffs":[[0," 1)\n            "],[-1,"    "],[0,"\n               "]],"start1":7674,"start2":7674,"length1":36,"length2":32},{"diffs":[[0,"   \n            "],[-1,"    "],[0,"if _sentence.fin"]],"start1":7687,"start2":7687,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"    "],[0,"return _sentence"]],"start1":7748,"start2":7748,"length1":36,"length2":32},{"diffs":[[0,"entence\n        "],[-1,"  "],[-1,"  "],[0,"return _sentence"]],"start1":7773,"start2":7773,"length1":36,"length2":32},{"diffs":[[0,"eturn _sentence\n"],[-1,"    "],[0,"    else:\n      "]],"start1":7790,"start2":7790,"length1":36,"length2":32},{"diffs":[[0,"tence\n    else:\n"],[-1,"    "],[0,"        return _"]],"start1":7800,"start2":7800,"length1":36,"length2":32},{"diffs":[[0,"nce\n    "],[-1,"    \n        "],[0,"\n    "],[1,"\n"],[0,"def _rep"]],"start1":7837,"start2":7837,"length1":34,"length2":22},{"diffs":[[0,"ectives("],[-1,"self, "],[0,"_sentenc"]],"start1":7867,"start2":7867,"length1":22,"length2":16},{"diffs":[[0,"ts):   \n    "],[-1,"   "],[-1," \n    "],[1,"\n"],[0,"    if _sent"]],"start1":7891,"start2":7891,"length1":33,"length2":25},{"diffs":[[0,"ce is not None:\n"],[-1,"    "],[0,"        # Lets f"]],"start1":7918,"start2":7918,"length1":36,"length2":32},{"diffs":[[0,"JECTIVE\n        "],[-1," "],[-1,"   "],[0,"while _sentence."]],"start1":7986,"start2":7986,"length1":36,"length2":32},{"diffs":[[0,"ECTIVE') != -1:\n"],[-1,"    "],[0,"            _sen"]],"start1":8028,"start2":8028,"length1":36,"length2":32},{"diffs":[[0,"CTIVE', str("],[-1,"self."],[0,"_getadjectiv"]],"start1":8092,"start2":8092,"length1":29,"length2":24},{"diffs":[[0," 1)\n            "],[-1,"    "],[0,"\n               "]],"start1":8128,"start2":8128,"length1":36,"length2":32},{"diffs":[[0,"   \n            "],[-1,"    "],[0,"if _sentence.fin"]],"start1":8141,"start2":8141,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1," "],[-1,"   "],[0,"return _sentence"]],"start1":8196,"start2":8196,"length1":36,"length2":32},{"diffs":[[0,"entence\n        "],[-1,"  "],[-1,"  "],[0,"return _sentence"]],"start1":8221,"start2":8221,"length1":36,"length2":32},{"diffs":[[0,"entence\n    "],[-1,"   "],[-1," "],[0,"else:\n"],[-1,"    "],[0,"        retu"]],"start1":8246,"start2":8246,"length1":38,"length2":30},{"diffs":[[0,"    "],[-1,"    \n        "],[0,"\n    "],[1,"\n"],[0,"def "]],"start1":8289,"start2":8289,"length1":26,"length2":14},{"diffs":[[0,"e_names("],[-1,"self, "],[0,"_sentenc"]],"start1":8310,"start2":8310,"length1":22,"length2":16},{"diffs":[[0,"ounts):\n    "],[-1,"    \n    "],[1,"\n"],[0,"    if _sent"]],"start1":8331,"start2":8331,"length1":33,"length2":25},{"diffs":[[0,"t None:\n        "],[-1,"    "],[0,"# Lets find and "]],"start1":8366,"start2":8366,"length1":36,"length2":32},{"diffs":[[0,"f #NAME\n        "],[-1,"    "],[0,"while _sentence."]],"start1":8421,"start2":8421,"length1":36,"length2":32},{"diffs":[[0,"-1:\n            "],[-1,"  "],[-1,"  "],[0,"_sentence = _sen"]],"start1":8470,"start2":8470,"length1":36,"length2":32},{"diffs":[[0,"str("],[-1,"self."],[0,"_get"]],"start1":8525,"start2":8525,"length1":13,"length2":8},{"diffs":[[0," 1)\n            "],[-1,"    "],[0,"\n               "]],"start1":8548,"start2":8548,"length1":36,"length2":32},{"diffs":[[0,"   \n            "],[-1,"    "],[0,"if _sentence.fin"]],"start1":8561,"start2":8561,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"    "],[0,"return _sentence"]],"start1":8611,"start2":8611,"length1":36,"length2":32},{"diffs":[[0,"entence\n        "],[-1,"  "],[-1,"  "],[0,"return _sentence"]],"start1":8636,"start2":8636,"length1":36,"length2":32},{"diffs":[[0,"eturn _sentence\n"],[-1,"    "],[0,"    else:\n      "]],"start1":8653,"start2":8653,"length1":36,"length2":32},{"diffs":[[0,"  else:\n        "],[-1,"    "],[0,"return _sentence"]],"start1":8671,"start2":8671,"length1":36,"length2":32},{"diffs":[[0,"tence\n\n\n"],[-1,"    "],[0,"def _rep"]],"start1":8698,"start2":8698,"length1":20,"length2":16},{"diffs":[[0,"lace_an("],[-1,"self, "],[0,"_sentenc"]],"start1":8714,"start2":8714,"length1":22,"length2":16},{"diffs":[[0,"ounts):\n    "],[-1," "],[-1,"   "],[0,"# Lets find "]],"start1":8735,"start2":8735,"length1":28,"length2":24},{"diffs":[[0," of #AN\n"],[-1,"    "],[0,"    # Th"]],"start1":8784,"start2":8784,"length1":20,"length2":16},{"diffs":[[0,"ing\n    "],[-1,"   "],[-1," "],[0,"# with a"]],"start1":8863,"start2":8863,"length1":20,"length2":16},{"diffs":[[0,"sonant.\n    "],[-1,"    "],[0,"\n"],[-1,"    "],[0,"    if _sent"]],"start1":8894,"start2":8894,"length1":33,"length2":25},{"diffs":[[0,"t None:\n        "],[-1," "],[-1,"   "],[0,"while _sentence."]],"start1":8929,"start2":8929,"length1":36,"length2":32},{"diffs":[[0,"-1:\n            "],[-1,"    "],[0,"_an_index = _sen"]],"start1":8976,"start2":8976,"length1":36,"length2":32},{"diffs":[[0,"N')\n            "],[-1,"    "],[0,"\n               "]],"start1":9022,"start2":9022,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1,"    "],[0,"if _an_index"]],"start1":9039,"start2":9039,"length1":28,"length2":24},{"diffs":[[0,"index > -1:\n"],[-1,"    "],[0,"            "]],"start1":9058,"start2":9058,"length1":28,"length2":24},{"diffs":[[0,"            "],[-1,"  "],[-1,"  \n    "],[1,"\n"],[0,"            "]],"start1":9116,"start2":9116,"length1":33,"length2":25},{"diffs":[[0,"AEIOU':\n"],[-1,"    "],[0,"        "]],"start1":9178,"start2":9178,"length1":20,"length2":16},{"diffs":[[0,"            "],[-1,"    "],[0,"else:\n"],[-1,"    "],[0,"            "]],"start1":9261,"start2":9261,"length1":38,"length2":30},{"diffs":[[0,"            "],[-1,"  "],[-1,"  \n    "],[1,"\n"],[0,"            "]],"start1":9353,"start2":9353,"length1":33,"length2":25},{"diffs":[[0,"                "],[-1,"    "],[0,"return _sentence"]],"start1":9410,"start2":9410,"length1":36,"length2":32},{"diffs":[[0,"entence\n        "],[-1," "],[-1,"   "],[0,"return _sentence"]],"start1":9435,"start2":9435,"length1":36,"length2":32},{"diffs":[[0,"eturn _sentence\n"],[-1,"    "],[0,"    else:\n      "]],"start1":9452,"start2":9452,"length1":36,"length2":32},{"diffs":[[0,"  else:\n        "],[-1,"   "],[-1," "],[0,"return _sentence"]],"start1":9470,"start2":9470,"length1":36,"length2":32},{"diffs":[[0,"entence\n"],[-1,"    \n    \n    "],[1,"\n\n"],[0,"def _rep"]],"start1":9495,"start2":9495,"length1":30,"length2":18},{"diffs":[[0,"_random("],[-1,"self, "],[0,"_sentenc"]],"start1":9517,"start2":9517,"length1":22,"length2":16},{"diffs":[[0,"tence):\n    "],[-1," "],[-1,"   \n    "],[1,"\n"],[0,"    if _sent"]],"start1":9529,"start2":9529,"length1":33,"length2":25},{"diffs":[[0,"ce is not None:\n"],[-1,"    "],[0,"        # Lets f"]],"start1":9556,"start2":9556,"length1":36,"length2":32},{"diffs":[[0,"#RANDOM\n        "],[-1,"    "],[0,"while _sentence."]],"start1":9621,"start2":9621,"length1":36,"length2":32},{"diffs":[[0,"-1:\n            "],[-1,"    \n  "],[1,"\n"],[0,"              _r"]],"start1":9672,"start2":9672,"length1":39,"length2":33},{"diffs":[[0,"        "],[-1,"  "],[0,"_random_"]],"start1":9693,"start2":9693,"length1":18,"length2":16},{"diffs":[[0,"NDOM') \n"],[-1,"    "],[0,"        "]],"start1":9736,"start2":9736,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1,"    "],[0,"_end_ind"]],"start1":9805,"start2":9805,"length1":20,"length2":16},{"diffs":[[0,"            "],[-1," "],[-1,"   \n    "],[1,"\n"],[0,"            "]],"start1":9846,"start2":9846,"length1":33,"length2":25},{"diffs":[[0,"            "],[-1,"   "],[-1," \n    "],[1,"\n"],[0,"            "]],"start1":9917,"start2":9917,"length1":33,"length2":25},{"diffs":[[0,"        "],[-1,"    "],[0,"_choice "]],"start1":10012,"start2":10012,"length1":20,"length2":16},{"diffs":[[0,"                "],[-1,"  "],[-1,"  "],[0,"_sub_list[_choic"]],"start1":10067,"start2":10067,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1,"    \n    "],[1,"\n"],[0,"            "]],"start1":10102,"start2":10102,"length1":33,"length2":25},{"diffs":[[0," 1]\n            "],[-1,"    "],[0,"_sentence = _sen"]],"start1":10181,"start2":10181,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"    \n  "],[1,"\n"],[0,"              if"]],"start1":10279,"start2":10279,"length1":39,"length2":33},{"diffs":[[0,"   \n            "],[-1,"  "],[0,"if _sentence.fin"]],"start1":10292,"start2":10292,"length1":34,"length2":32},{"diffs":[[0,"                "],[-1,"    "],[0,"return _sentence"]],"start1":10344,"start2":10344,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"    "],[0,"\n            ret"]],"start1":10379,"start2":10379,"length1":36,"length2":32},{"diffs":[[0,"       \n        "],[-1,"    "],[0,"return _sentence"]],"start1":10388,"start2":10388,"length1":36,"length2":32},{"diffs":[[0,"eturn _sentence\n"],[-1,"    "],[0,"    else:\n      "]],"start1":10405,"start2":10405,"length1":36,"length2":32},{"diffs":[[0,"  else:\n        "],[-1,"   "],[-1," "],[0,"return _sentence"]],"start1":10423,"start2":10423,"length1":36,"length2":32},{"diffs":[[0,"e\n    \n\n"],[-1,"    "],[0,"def _rep"]],"start1":10454,"start2":10454,"length1":20,"length2":16},{"diffs":[[0,"ise("],[-1,"self, "],[0,"_sen"]],"start1":10482,"start2":10482,"length1":14,"length2":8},{"diffs":[[0,"tence):\n"],[-1,"    "],[0,"    #pri"]],"start1":10490,"start2":10490,"length1":20,"length2":16},{"diffs":[[0,"  \"\n    "],[-1,"    \n "],[1,"\n"],[0,"    "],[-1,"   "],[0,"if _sent"]],"start1":10533,"start2":10533,"length1":29,"length2":21},{"diffs":[[0,"ce is not None:\n"],[-1,"    "],[0,"        while _s"]],"start1":10556,"start2":10556,"length1":36,"length2":32},{"diffs":[[0,"        "],[-1,"   "],[-1," "],[0,"_cap_ind"]],"start1":10627,"start2":10627,"length1":20,"length2":16},{"diffs":[[0,"            "],[-1,"    "],[0,"_part1 = _se"]],"start1":10678,"start2":10678,"length1":28,"length2":24},{"diffs":[[0,"            "],[-1," "],[-1,"   "],[0,"_part2 = _se"]],"start1":10722,"start2":10722,"length1":28,"length2":24},{"diffs":[[0,"2:]\n            "],[-1,"  "],[-1,"  "],[0,"_sentence = _par"]],"start1":10765,"start2":10765,"length1":36,"length2":32},{"diffs":[[0,"alize()    \n"],[-1,"    "],[0,"            "]],"start1":10814,"start2":10814,"length1":28,"length2":24},{"diffs":[[0,"                "],[-1,"    "],[0,"\n            if "]],"start1":10891,"start2":10891,"length1":36,"length2":32},{"diffs":[[0,"       \n        "],[-1,"    "],[0,"if _sentence.fin"]],"start1":10900,"start2":10900,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"    "],[0,"return _sentence"]],"start1":10956,"start2":10956,"length1":36,"length2":32},{"diffs":[[0,"entence\n        "],[-1,"  "],[-1,"  "],[0,"return _sentence"]],"start1":10981,"start2":10981,"length1":36,"length2":32},{"diffs":[[0,"n _sentence\n"],[-1,"    "],[0,"    else:\n  "]],"start1":11002,"start2":11002,"length1":28,"length2":24},{"diffs":[[0,"tence\n    else:\n"],[-1,"    "],[0,"        return _"]],"start1":11008,"start2":11008,"length1":36,"length2":32}]],"length":11048,"saved":false}
{"ts":1376904076372,"patch":[[{"diffs":[[0,"##\n\n"],[-1,"def __init__(self):\n    pass"],[0,"\n\n##"]],"start1":1729,"start2":1729,"length1":36,"length2":8}]],"length":11020,"saved":false}
